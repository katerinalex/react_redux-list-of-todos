{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","types/FilterType.ts","components/IfInclude.ts","App.tsx","index.tsx"],"names":["currentTodoReducer","state","action","type","payload","filterReducer","query","status","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","openModal","openedTodoId","className","map","todo","classNames","id","completed","title","onClick","TodoFilter","statusFilter","onChangeFilter","input","onChangeInput","clearInput","value","onChange","placeholder","style","pointerEvents","Loader","TodoModal","isDataLoad","closeModal","href","user","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getTodos","getUser","userId","ifInclude","str","subStr","toLowerCase","includes","trim","a","todosFromServer","userFromServer","App","useState","isOpenedModal","setIsOpenedModal","openedTodo","setOpenedTodo","setIsDataLoaded","isUserLoad","setIsUserLoaded","todosServer","setTodosServer","All","setStatusFilter","setInput","visibleTodos","useMemo","inputNew","Active","Completed","filterTodos","useEffect","loadTodos","event","target","preventDefault","loadUserForTodo","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3f95677.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","export const actions = { /* put action creators here */};\n\nconst filterReducer = () => {\n  return {\n    query: '',\n    status: 'all',\n  };\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nexport const actions = {};\n\nconst todosReducer = (): Todo[] => {\n  return [];\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos:Todo[],\n  openModal: (todo: Todo) => void,\n  openedTodoId:number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  openModal,\n  openedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': openedTodoId === todo.id,\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={\n                todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'\n              }\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => openModal(todo)}\n            >\n              <span className=\"icon\">\n                {openedTodoId === todo.id\n                  ? <i className=\"far fa-eye-slash\" />\n                  : <i className=\"far fa-eye\" />}\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\n\ntype Props = {\n  onChangeFilter: (event:React.ChangeEvent<HTMLSelectElement>) => void,\n  statusFilter:string,\n  input:string,\n  onChangeInput: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  clearInput: (event: React.MouseEvent<HTMLButtonElement>) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  statusFilter,\n  onChangeFilter,\n  input,\n  onChangeInput,\n  clearInput,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={statusFilter}\n          onChange={onChangeFilter}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={input}\n        onChange={onChangeInput}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {input && (\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={clearInput}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { TodoWithUser } from '../../types/TodoWithUser';\n\ntype Props = {\n  todo:TodoWithUser | null,\n  isDataLoad:boolean,\n  closeModal:() => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  isDataLoad,\n  closeModal,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!isDataLoad) ? (\n        <Loader />\n      ) : todo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${todo.user.email}`}>\n                {todo.user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'All',\n  Active = 'active',\n  Completed = 'completed',\n}\n","export const ifInclude = (str:string, subStr:string) => (\n  str.toLowerCase().includes(subStr.toLowerCase().trim())\n);\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoWithUser } from './types/TodoWithUser';\nimport { FilterType } from './types/FilterType';\nimport { ifInclude } from './components/IfInclude';\n\nasync function loadTodos() {\n  const todosFromServer = await getTodos();\n\n  return todosFromServer;\n}\n\nasync function loadUserForTodo(todo:Todo) {\n  const userFromServer = await getUser(todo.userId);\n\n  return userFromServer;\n}\n\nexport const App: React.FC = () => {\n  const [isOpenedModal, setIsOpenedModal] = useState(false);\n  const [openedTodo, setOpenedTodo] = useState<TodoWithUser | null>(null);\n  const [isDataLoad, setIsDataLoaded] = useState(false);\n  const [isUserLoad, setIsUserLoaded] = useState(false);\n  const [todosServer, setTodosServer] = useState<Todo[]>([]);\n  const openModal = (todo:Todo) => {\n    setIsOpenedModal(true);\n    loadUserForTodo(todo)\n      .then(res => {\n        setOpenedTodo({\n          ...todo,\n          user: res,\n        });\n        setIsUserLoaded(true);\n      })\n      .finally(() => {\n        setIsUserLoaded(true);\n      });\n  };\n\n  const closeModal = () => {\n    setIsOpenedModal(false);\n    if (openedTodo) {\n      setOpenedTodo(null);\n    }\n  };\n\n  const [statusFilter, setStatusFilter] = useState<string>(FilterType.All);\n  const [input, setInput] = useState('');\n\n  const filterTodos = (filter:string, inputNew:string) => {\n    switch (filter) {\n      case FilterType.Active:\n        return (todosServer.filter(todo => !todo.completed && ifInclude(todo.title, inputNew)));\n\n      case FilterType.Completed:\n        return (todosServer.filter(todo => todo.completed && ifInclude(todo.title, inputNew)));\n\n      default:\n        return (todosServer.filter(\n          todo => ifInclude(todo.title, inputNew),\n        ));\n    }\n  };\n\n  const visibleTodos:Todo[] = useMemo(\n    () => filterTodos(statusFilter, input), [statusFilter, input, todosServer],\n  );\n\n  const onChangeFilter = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusFilter(event.target.value);\n  };\n\n  const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value);\n  };\n\n  const clearInput = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setInput('');\n  };\n\n  useEffect(() => {\n    loadTodos().then(res => {\n      setTodosServer(res);\n      setIsDataLoaded(true);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter onChangeFilter={onChangeFilter} statusFilter={statusFilter} input={input} onChangeInput={onChangeInput} clearInput={clearInput} />\n            </div>\n\n            <div className=\"block\">\n              {isDataLoad\n                ? <TodoList todos={visibleTodos} openModal={openModal} openedTodoId={openedTodo ? openedTodo.id : 0} />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isOpenedModal && <TodoModal todo={openedTodo} isDataLoad={isUserLoad} closeModal={closeModal} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}